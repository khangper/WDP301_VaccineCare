// import React, { useState, useEffect, useContext } from "react";
// import { Link } from "react-router-dom";
// import { Modal, Button } from "react-bootstrap";
// import "./ProfileChildPage.css";
// import "bootstrap/dist/css/bootstrap.min.css";
// import tiemle from "../../../assets/HomePage/tiemle.png";
// import tiemtheogoi from "../../../assets/HomePage/tiemtheogoi.png";
// import tuvanmuitiem from "../../../assets/HomePage/tuvanmuitiem.png";
// import api from "../../../services/api";
// import { AuthContext } from "../../../context/AuthContext";
// import jwtDecode from "jwt-decode";

// function ProfileChildPage() {
//   const [childrenData, setChildrenData] = useState([]);
//   const [error, setError] = useState(null);
//   const [confirmDelete, setConfirmDelete] = useState(null);
//   const { token } = useContext(AuthContext);

//   useEffect(() => {
//     if (!token) {
//       setError("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!");
//       return;
//     }
  
//     let userId;
//     try {
//       const decoded = jwtDecode(token);
//       userId = decoded.Id;
//       console.log("User ID from token:", userId);
//     } catch (err) {
//       console.error("‚ùå L·ªói gi·∫£i m√£ token:", err);
//       setError("Token kh√¥ng h·ª£p l·ªá!");
//       return;
//     }
  
//     const fetchChildren = async () => {
//       try {
//         const response = await api.get(`/Child/get-all?FilterOn=userId&FilterQuery=${userId}`, {
//           headers: { Authorization: `Bearer ${token}` },
//         });
  
//         const childrenArray = response.data.$values ? response.data.$values : response.data;
//         console.log("T·∫•t c·∫£ h·ªì s∆° tr·∫ª:", childrenArray);
//         setChildrenData(childrenArray);
//       } catch (err) {
//         console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu tr·∫ª em:", err);
//         setError("L·ªói khi l·∫•y d·ªØ li·ªáu tr·∫ª em.");
//       }
//     };
  
//     fetchChildren();
//   }, [token]);

//   const handleDeleteConfirm = (childId) => {
//     setConfirmDelete(childId);
//   };

//   const handleDeleteProfile = async (childId) => {
//     try {
//       await api.delete(`/Child/delete/${childId}`, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//       setChildrenData(childrenData.filter(child => child.id !== childId));
//       setConfirmDelete(null);
//     } catch (err) {
//       console.error("‚ùå L·ªói khi x√≥a h·ªì s∆° tr·∫ª:", err);
//       setError("Kh√¥ng th·ªÉ x√≥a h·ªì s∆° tr·∫ª.");
//     }
//   };
  
//   if (error) {
//     return (
//       <div className="alert alert-danger">
//         <p>{error}</p>
//       </div>
//     );
//   }

//   return (
//     <div className="HomePage-Allcontainer">
//       <div className="HomePage-main-container">
//         <div className="container">
//           <div className="row">
//             <div className="col-12 mt-152 BookingPage-titletitle">
//               <div className="BookingPage-heading-protected-together">
//                 H·ªì S∆° tr·∫ª
//               </div>
//             </div>
//           </div>
//         </div>
//       </div>

//       <div className="BookingPage-container">
//         <div className="container">
//           <div className="row">
//             <div className="col-12">
//               {childrenData.length > 0 ? (
//                 childrenData.map((child) => (
//                   <div key={child.id} className="Footer-input mt-4">
//                     <div className="adow">
//                       <div className="ProfileChildPage-single-input">
//                         <div className="ProfileChildPage-flex">
//                           <Link to={`/vaccination/${child.id}`} className="ProfileChildPage-text">
//                             {child.childrenFullname}
//                           </Link>
//                           <button className="btn btn-danger ms-3" onClick={() => handleDeleteConfirm(child.id)}>
//                             X√≥a
//                           </button>
//                         </div>               
//                       </div>
//                     </div>
//                   </div>
//                 ))
//               ) : (
//                 <p>Kh√¥ng c√≥ h·ªì s∆° n√†o ƒë∆∞·ª£c t·∫°o.</p>
//               )}
//             </div>
//           </div>
//         </div>
//       </div>

//       {/* React-Bootstrap Modal for delete confirmation */}
//       <Modal show={confirmDelete !== null} onHide={() => setConfirmDelete(null)} centered>
//         <Modal.Header closeButton>
//           <Modal.Title>X√°c nh·∫≠n x√≥a</Modal.Title>
//         </Modal.Header>
//         <Modal.Body>B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a h·ªì s∆° n√†y kh√¥ng?</Modal.Body>
//         <Modal.Footer>
//           <Button variant="secondary" onClick={() => setConfirmDelete(null)}>
//             No
//           </Button>
//           <Button variant="danger" onClick={() => handleDeleteProfile(confirmDelete)}>
//             Yes
//           </Button>
//         </Modal.Footer>
//       </Modal>
//     </div>
//   );
// }

// export default ProfileChildPage;
import React, { useState, useEffect, useContext } from "react";
import { Link } from "react-router-dom";
import { List, Avatar, Button, Modal, message } from "antd";
import { ExclamationCircleOutlined } from "@ant-design/icons";
import jwtDecode from "jwt-decode";
import api from "../../../services/api";
import { AuthContext } from "../../../context/AuthContext";
import "./ProfileChildPage.css";

const { confirm } = Modal;

const ProfileChildPage = () => {
  const [childrenData, setChildrenData] = useState([]);
  const [error, setError] = useState(null);
  const { token } = useContext(AuthContext);

  useEffect(() => {
    if (!token) {
      setError("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!");
      return;
    }

    let userId;
    try {
      const decoded = jwtDecode(token);
      userId = decoded.Id;
    } catch (err) {
      console.error("‚ùå L·ªói gi·∫£i m√£ token:", err);
      setError("Token kh√¥ng h·ª£p l·ªá!");
      return;
    }

    const fetchChildren = async () => {
      try {
        const response = await api.get(`/Child/get-all?FilterOn=userId&FilterQuery=${userId}`, {
          headers: { Authorization: `Bearer ${token}` },
        });

        const childrenArray = response.data.$values || response.data;
        setChildrenData(childrenArray);
      } catch (err) {
        console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu tr·∫ª em:", err);
        setError("L·ªói khi l·∫•y d·ªØ li·ªáu tr·∫ª em.");
      }
    };

    fetchChildren();
  }, [token]);

  const handleDeleteConfirm = (childId) => {
    confirm({
      title: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·∫•t c·∫£ d·ªØ li·ªáu v·ªÅ ƒë·ª©a tr·∫ª n√†y?",
      icon: <ExclamationCircleOutlined />,
      content: "T·∫•t c·∫£ d·ªØ li·ªáu li√™n quan ƒë·∫øn ƒë·ª©a tr·∫ª, cu·ªôc h·∫πn, c√°c ho√° ƒë∆°n v√† h·ªì s∆° c·ªßa tr·∫ª c≈©ng s·∫Ω ƒë·ªìng th·ªùi b·ªã xo√°. H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c, vui l√≤ng tham kh·∫£o √Ω ki·∫øn c·ªßa t∆∞ v·∫•n vi√™n tr∆∞·ªõc khi xo√°!",
      okText: "X√≥a",
      okType: "danger",
      cancelText: "H·ªßy",
      onOk: () => handleDeleteProfile(childId),
    });
  };

  const handleDeleteProfile = async (childId) => {
    try {
      await api.delete(`/Child/delete/${childId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setChildrenData(childrenData.filter((child) => child.id !== childId));
      message.success("üóëÔ∏è X√≥a h·ªì s∆° th√†nh c√¥ng!");
    } catch (err) {
      console.error("‚ùå L·ªói khi x√≥a h·ªì s∆° tr·∫ª:", err);
      message.error("Kh√¥ng th·ªÉ x√≥a h·ªì s∆° tr·∫ª.");
    }
  };

  if (error) {
    return (
      <div className="alert alert-danger">
        <p>{error}</p>
      </div>
    );
  }

  return (
    <div className="HomePage-Allcontainer">
    <div className="HomePage-main-container">
      <div className="container">
        <div className="row">
          <div className="col-12 mt-152 BookingPage-titletitle">
            <div className="BookingPage-heading-protected-together">
              H·ªì S∆° tr·∫ª
            </div>
          </div>
        </div>
      </div>
    </div>

    <div className="ProfileChildPage-container" style={{ maxWidth: 800, margin: "0 auto", padding: "2rem" }}>
      <h2 style={{ textAlign: "center", marginBottom: "2rem" }}>üßí Danh s√°ch h·ªì s∆° tr·∫ª</h2>
      {childrenData.length > 0 ? (
        <List
          itemLayout="horizontal"
          dataSource={childrenData}
          renderItem={(child) => (
            <List.Item
              actions={[
                <Button danger onClick={() => handleDeleteConfirm(child.id)}>
                  X√≥a
                </Button>,
              ]}
            >
              <List.Item.Meta
                avatar={
                  <Avatar
                    src={`https://api.dicebear.com/7.x/initials/svg?seed=${child.childrenFullname}`}
                    alt={child.childrenFullname}
                  />
                }
                title={<Link to={`/vaccination/${child.id}`}>{child.childrenFullname}</Link>}
                description={
                  <>
                    <div>üéÇ Ng√†y sinh: {new Date(child.dob).toLocaleDateString("vi-VN")}</div>
                    <div>üöª Gi·ªõi t√≠nh: {child.gender}</div>
                  </>
                }
              />
            </List.Item>
          )}
        />
      ) : (
        <p style={{ textAlign: "center" }}>Kh√¥ng c√≥ h·ªì s∆° n√†o ƒë∆∞·ª£c t·∫°o.</p>
      )}
    </div>
    </div>


  );
};

export default ProfileChildPage;
